{
	"info": {
		"_postman_id": "2c2904ec-bcb3-4ba8-89f6-6c356ad80ec9",
		"name": "Group_29_HW2_Anatol",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17187294"
	},
	"item": [
		{
			"name": "task1_user_info_2 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
							"// 2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
							"// 3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное\r",
							"\r",
							"function nameValidation(value) {\r",
							"    if(value && value.length > 2 && value.length < 41 && value.trim() == value) {\r",
							"        return true\r",
							"    } else return false\r",
							"} \r",
							"function ageValidation(value) {\r",
							"  if(value && !isNaN(value) && value > 17 && value < 121 && Number.isInteger(+value)) {\r",
							"      return true\r",
							"  } else return false\r",
							"}\r",
							"\r",
							" function salaryValidation(value) {\r",
							"     if(value && !isNaN(value) && value > 0 && value < 11000001 && Number.isInteger(+value)) {\r",
							"         return true\r",
							"     } else return false\r",
							" }\r",
							"\r",
							"function validator() {\r",
							"    return nameValidation(name) && ageValidation(age) && salaryValidation(salary) ? true : false\r",
							"}\r",
							"let name = pm.iterationData.get('name')\r",
							"let age = pm.iterationData.get('age')\r",
							"let salary = pm.iterationData.get('salary')\r",
							"\r",
							"\r",
							"if(validator()) {\r",
							"    pm.test(`Expect status 200 with name = \"${name}\", age = \"${age}\" and salary = \"${salary}\"`, () => {\r",
							"         pm.response.to.have.status(200);\r",
							"    }) \r",
							"} else {\r",
							"     pm.test(`Expect NOT to have status 200 with name = \"${name}\", age = \"${age}\" and salary = \"${salary}\"`, () => {\r",
							"         pm.response.to.not.have.status(200);\r",
							"    })  \r",
							"}\r",
							"console.log(validator())\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "task2_object_info_4 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"*/\r",
							"\r",
							"let req_salary = pm.request.url.query.get(\"salary\")\r",
							"let res_salary = pm.response.json().salary\r",
							"\r",
							"res_salary.forEach((el, i) => {\r",
							"    pm.test(`req_salary ${i + 1} * ${req_salary} == res_salary ${el}`, function(){\r",
							"        pm.expect(+req_salary * (i + 1)).to.eql(+el)\r",
							"    })\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=utar&age=29&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "utar"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "task3_object_info_3 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"*/\r",
							"\r",
							"let req_salary = +pm.request.url.query.get(\"salary\")\r",
							"let req_age = +pm.request.url.query.get(\"age\")\r",
							"let req_name = pm.request.url.query.get(\"name\")\r",
							"\r",
							"const req_obj = {\r",
							"    name : req_name,\r",
							"    age : req_age,\r",
							"    salary : req_salary\r",
							"}\r",
							"\r",
							"let res_salary = +pm.response.json().salary\r",
							"let res_age = +pm.response.json().age\r",
							"let res_name = pm.response.json().name\r",
							"\r",
							"const res_obj = {\r",
							"    name : res_name,\r",
							"    age : res_age,\r",
							"    salary : res_salary\r",
							"}\r",
							"\r",
							"pm.test(`res_obj == req_obj`, function(){\r",
							"    pm.expect(req_obj).to.deep.equal(res_obj)\r",
							"})\r",
							"\r",
							"//---------------------------------------------------\r",
							"\r",
							"const resp_obj = {}\r",
							"\r",
							"for(const key in req_obj){\r",
							"    if(!isNaN(pm.response.json()[key])){\r",
							"        resp_obj[key] = +pm.response.json()[key]\r",
							"    } else {\r",
							"        resp_obj[key] = pm.response.json()[key]\r",
							"    }\r",
							"}\r",
							"console.log(resp_obj)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Uladzimir&age=29&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Uladzimir"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "task4_user_info_2 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) \r",
							"таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую \r",
							"попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых \r",
							"данных. ( ${}  или другим способом)\r",
							"*/\r",
							"let arr = []\r",
							"const respon = pm.response.json();\r",
							"const salary = 1000\r",
							"\r",
							"for(const key in respon){\r",
							"    arr.push(key)\r",
							"}\r",
							"\r",
							"arr.forEach((el) => {\r",
							"    pm.test(`в json имеется параметр ${el}`, function(){\r",
							"        pm.expect(respon).to.have.property(el)\r",
							"    })\r",
							"})\r",
							"\r",
							"//----------------------------------------------------\r",
							"/*\r",
							"2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить \r",
							"на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, \r",
							"в которую попадают нужные параметры). Название теста должно видоизменяться исходя из \r",
							"подаваемых данных. ( ${}  или другим способом)\r",
							"*/\r",
							"const coefficient = [ \"\", 3.3, 2.7, 3.8, 2, 1]\r",
							"arr.forEach((el, i) => {\r",
							"    if(el != \"person\")\r",
							"    pm.test(`параметр ${el} равен salary умножить на ${coefficient[i]}`, function(){\r",
							"        pm.expect(+respon[el]).to.equal(1000 * coefficient[i])\r",
							"    })\r",
							"})\r",
							"\r",
							"//----------------------------------------------------\r",
							"/*\r",
							"3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, \r",
							"в котором будут проходить ОБА теста.\r",
							"*/\r",
							"const counters =  {\r",
							"    \"person\": \"\",\r",
							"    \"qa_salary_after_1.5_year\": 3.3,\r",
							"    \"qa_salary_after_12_months\": 2.7,\r",
							"    \"qa_salary_after_3.5_years\": 3.8,\r",
							"    \"qa_salary_after_6_months\": 2,\r",
							"    \"start_qa_salary\": 1\r",
							"}\r",
							"\r",
							"for(const key in counters){\r",
							"    pm.test(`в json имеется параметр ${key}`, () => {\r",
							"        pm.expect(respon).to.have.property(key)\r",
							"    })\r",
							"    if(key != \"person\"){\r",
							"    pm.test(`параметр ${key} = ${salary} * ${counters[key]}`, () =>{\r",
							"        pm.expect(respon[key]).to.equal(salary * counters[key])\r",
							"    })\r",
							"    }\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "utar",
							"type": "text"
						},
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}