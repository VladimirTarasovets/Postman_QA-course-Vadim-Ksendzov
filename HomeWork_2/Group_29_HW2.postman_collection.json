{
	"info": {
		"_postman_id": "cd6f7180-94d6-4c09-abb4-e03b7b9fbcba",
		"name": "Group_29_HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "task1_first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"2. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"3. Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "task2_user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let res_name = jsonData.name\r",
							"let res_age = jsonData.age\r",
							"let res_salary = jsonData.salary\r",
							"\r",
							"/* \r",
							"4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"*/\r",
							"\r",
							"pm.test(\"4. name в ответе равно name s request\", function () {\r",
							"    pm.expect(res_name).to.eql(\"Uladzimir\");\r",
							"});\r",
							"\r",
							"pm.test(\"5. age в ответе равно age s request\", function () {\r",
							"    pm.expect(res_age).to.eql(\"29\");\r",
							"});\r",
							"\r",
							"pm.test(\"6. salary в ответе равно salary s request\", function () {\r",
							"    pm.expect(res_salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"let req = request.data\r",
							"let req_name = req.name\r",
							"let req_age = req.age\r",
							"let req_salary = Number(req.salary)\r",
							"\r",
							"/*\r",
							"8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"*/\r",
							"\r",
							"pm.test(\"8. name в ответе равно name s request\", function () {\r",
							"    pm.expect(req_name).to.eql(res_name);\r",
							"});\r",
							"\r",
							"pm.test(\"9. age в ответе равно age s request\", function () {\r",
							"    pm.expect(req_age).to.eql(res_age);\r",
							"});\r",
							"\r",
							"pm.test(\"10. salary в ответе равно salary s request\", function () {\r",
							"    pm.expect(req_salary).to.eql(res_salary);\r",
							"});\r",
							"\r",
							"pm.test(\"11. Вывести в консоль параметр family из response\", function () {\r",
							"    console.log(jsonData.family)\r",
							"});\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"12. u_salary_1_5_year в ответе равно salary*4\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req_salary * 4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Uladzimir",
							"type": "text"
						},
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "task3_object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let req = pm.request.url.query\r",
							"\r",
							"let req_name = req.get(\"name\")\r",
							"let req_age = req.get(\"age\")\r",
							"let req_salary = Number(req.get(\"salary\"))\r",
							"\r",
							"/*\r",
							"5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"*/\r",
							"\r",
							"pm.test(\"5. name в ответе равно name s request\", function () {\r",
							"    pm.expect(req_name).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"pm.test(\"6. что age в ответе равно age s request\", function () {\r",
							"    pm.expect(req_age).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"pm.test(\"7. что salary в ответе равно salary s request\", function () {\r",
							"    pm.expect(req_salary).to.eql(jsonData.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"pm.test(\"8. Вывести в консоль параметр family из response\", function () {\r",
							"    console.log(jsonData.family)\r",
							"});\r",
							"\r",
							"/*\r",
							"9. Проверить, что у параметра dog есть параметры name.\r",
							"10. Проверить, что у параметра dog есть параметры age.\r",
							"11. Проверить, что параметр name имеет значение Luky.\r",
							"12. Проверить, что параметр age имеет значение 4.\r",
							"*/\r",
							"pm.test(\"9. Проверить, что у параметра dog есть параметры name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"pm.test(\"10. Проверить, что у параметра dog есть параметры age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"pm.test(\"11. Проверить, что параметр name имеет значение Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"pm.test(\"12. Проверить, что параметр age имеет значение 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Uladzimir&age=29&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Uladzimir"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "task4_object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let req = pm.request.url.query\r",
							"\r",
							"let req_name = req.get(\"name\")\r",
							"let req_age = Number(req.get(\"age\"))\r",
							"let req_salary = Number(req.get(\"salary\"))\r",
							"\r",
							"let res_salary = jsonData.salary\r",
							"\r",
							"let user_name = jsonData.name\r",
							"let user_age = jsonData.age\r",
							"let user_salary = jsonData.salary[0]\r",
							"\r",
							"// 18-20. Передать в окружение переменную name, age, salary\r",
							"pm.environment.set(\"name\", user_name);\r",
							"pm.environment.set(\"age\", user_age);\r",
							"pm.environment.set(\"salary\", user_salary);\r",
							"\r",
							"/*\r",
							"5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"*/\r",
							"\r",
							"pm.test(\"5. name в ответе равно name s request\", function () {\r",
							"    pm.expect(req_name).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"pm.test(\"6. что age в ответе равно age s request\", function () {\r",
							"    pm.expect(req_age).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"/*\r",
							"7. Вывести в консоль параметр salary из request.\r",
							"8. Вывести в консоль параметр salary из response.\r",
							"*/\r",
							"\r",
							"pm.test(\"7. Вывести в консоль параметр salary из request\", function () {\r",
							"    console.log(req_salary)\r",
							"});\r",
							"\r",
							"pm.test(\"8. Вывести в консоль параметр salary из response\", function () {\r",
							"    console.log(res_salary)\r",
							"});\r",
							"\r",
							"/*\r",
							"9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"*/\r",
							"\r",
							"pm.test(\"9. Вывести в консоль 0-й элемент параметра salary из response.\", function () {\r",
							"    console.log(res_salary[0])\r",
							"});\r",
							"\r",
							"pm.test(\"10. Вывести в консоль 1-й элемент параметра salary из response\", function () {\r",
							"    console.log(res_salary[1])\r",
							"});\r",
							"\r",
							"pm.test(\"11. Вывести в консоль 2-й элемент параметра salary из response.\", function () {\r",
							"    console.log(res_salary[2])\r",
							"});\r",
							"\r",
							"/*\r",
							"12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"*/\r",
							"\r",
							"pm.test(\"12. Проверить, что 0-й элемент параметра salary равен salary из request\", function () {\r",
							"    pm.expect(res_salary[0]).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"pm.test(\"13. Проверить, что 1-й элемент параметра salary равен salary*2 из request\", function () {\r",
							"    pm.expect(Number(res_salary[1])).to.eql(req_salary * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"14. Проверить, что 2-й элемент параметра salary равен salary*3 из request\", function () {\r",
							"    pm.expect(Number(res_salary[2])).to.eql(req_salary * 3);\r",
							"});\r",
							"\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"let arr = jsonData.salary;\r",
							"\r",
							"for (let prop of arr) {\r",
							"  console.log(prop);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "task5_user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"// 7. Спарсить request.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let req = request.data\r",
							"\r",
							"let req_salary = Number(req.salary)\r",
							"let req_age = Number(req.age)\r",
							"\r",
							"\r",
							"let user_name = jsonData.person.u_name[0]\r",
							"let user_age = jsonData.person.u_age\r",
							"let user_salary = jsonData.start_qa_salary\r",
							"\r",
							"/*\r",
							"1. Вставить параметр salary из окружения в request\r",
							"2. Вставить параметр age из окружения в age\r",
							"3. Вставить параметр name из окружения в name\r",
							"*/\r",
							"\r",
							"pm.environment.set(\"name\", user_name);\r",
							"pm.environment.set(\"age\", user_age);\r",
							"pm.environment.set(\"salary\", user_salary);\r",
							"\r",
							"/*\r",
							"8. Проверить, что json response имеет параметр start_qa_salary\r",
							"9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"13. Проверить, что json response имеет параметр person\r",
							"*/\r",
							"\r",
							"pm.test(\"8. json response имеет параметр start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\")\r",
							"});\r",
							"\r",
							"pm.test(\"9. json response имеет параметр qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"\r",
							"pm.test(\"10. json response имеет параметр qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"\r",
							"pm.test(\"11. json response имеет параметр qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"\r",
							"pm.test(\"12. json response имеет параметр qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"\r",
							"pm.test(\"13. json response имеет параметр person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\")\r",
							"});\r",
							"\r",
							"/*\r",
							"14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"*/\r",
							"\r",
							"pm.test(\"14. параметр start_qa_salary равен salary из request\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"pm.test(\"15. параметр qa_salary_after_6_months равен salary*2 из request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req_salary * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"16. параметр qa_salary_after_12_months равен salary*2.7 из request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req_salary * 2.7);\r",
							"});\r",
							"\r",
							"pm.test(\"17. параметр qa_salary_after_1.5_year равен salary*3.3 из request\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req_salary * 3.3);\r",
							"});\r",
							"\r",
							"pm.test(\"18. параметр qa_salary_after_3.5_years равен salary*3.8 из request\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req_salary * 3.8);\r",
							"});\r",
							"\r",
							"pm.test(\"19. в параметре person, 1-й элемент из u_name равен salary из request\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"pm.test(\"20. параметр u_age равен age из request\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"pm.test(\"21. параметр u_salary_5_years равен salary*4.2 из request\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(req_salary * 4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"let arr = jsonData.person\r",
							"for (let prop in arr) {\r",
							"  console.log(prop);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}